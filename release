#!/usr/bin/python
"""release: Script for starting and finishing release branches with automatic version bump"""

__author__      = "Stefano Zambon"
__date__        = "March 7th 2016"
__copyright__   = "Copyright (C) 2016 MIND Music Labs"

import subprocess
import re
import argparse
import tempfile
import os

######################
#  Module Constants  #
######################

DEFAULT_VERSION_HEADER_FILENAME = 'include/version.h'
DEFAULT_HISTORY_FILENAME = './HISTORY.md'
VERSION_FIELDS = ['maj', 'min', 'rev']
BRANCH_VERSION_PREFIX = 'release-'

HISTORY_TAG_LINE = '###--##--##--%%--MIND-HIST-TAG--%%--##--##--###############\n'
HISTORY_EDIT_TEMPLATE = [  "## Write short history above the previous line, but don't touch the rest!\n\n",
                           '## Git log output from previous release tag:\n\n'
                        ]


######################
#  Helper Functions  #
######################

def execute_command(cmdline):
    """Launch shell command and returns stdout, stderr"""
    process = subprocess.Popen(cmdline.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = process.communicate()
    return out, err

def version_field_regexp(field):
    find_version = re.compile(r"""(\#define \s* .*__VERSION_%s \s* )(\d+)""" % field.upper(), re.VERBOSE)
    return find_version

def get_version_number(header_str, field):
    """Find maj, min or rev numbers by parsing given header string"""

    find_version = version_field_regexp(field)
    matches = find_version.findall(header_str)
    if (len(matches) != 1):
        raise ValueError, "Invalid version format in version.h while looking for %s number" % field
    return int(matches[0][1])

def get_version_string(version):
    """Convert version dictionary to string in %d.%d.%d format"""
    return "%d.%d.%d" % (version['maj'], version['min'], version['rev'])

def get_full_version(header_file=DEFAULT_VERSION_HEADER_FILENAME):
    """Parse header file with version number and returns dictionary with 'maj', 'min' and 'rev' numbers"""

    with open(header_file) as infile:
        header_str = infile.read()
    full_version = { v : get_version_number(header_str, v) for v in VERSION_FIELDS }
    return full_version

def bump_version(version, bump_field='rev'):
    bumped_version = dict(version)
    bumped_version[bump_field] += 1
    field_idx = VERSION_FIELDS.index(bump_field)
    for n in range(field_idx+1, len(VERSION_FIELDS)):
        bumped_version[VERSION_FIELDS[n]] = 0
    return bumped_version

def write_version_to_file(version, header_file=DEFAULT_VERSION_HEADER_FILENAME):
    """Write contents of version dictionary to given header file."""

    with open(header_file, 'r') as infile:
        header_str = infile.read()
    for v in VERSION_FIELDS:
        find_version = version_field_regexp(v)
        header_str = re.sub(find_version, r'\1 %s' % version[v], header_str)
    with open(header_file, 'w') as outfile:
        outfile.write(header_str)

def is_repository_clean():
    git_status_out, dummy = execute_command('git status')
    return (git_status_out.split('\n')[1] == 'nothing to commit, working directory clean')

def get_branches():
    raw_branches, dummy = execute_command('git branch --no-color')
    branches = [rb[2:] for rb in raw_branches.split('\n') if rb]
    return branches

def get_active_branch():
    cur_branch, dummy = execute_command('git rev-parse --abbrev-ref HEAD')
    return cur_branch.strip()


###################
#  Main Commands  #
###################

def release_start(bump_type='rev'):
    """Start a release branch and bump the version number."""

    if not is_repository_clean():
        raise ValueError, "Repository dirty, commit your changes before starting a release branch."
    branches = get_branches()
    if not all(not b.startswith(BRANCH_VERSION_PREFIX) for b in branches):
        raise ValueError, "There is already a release branch open, close it before starting a new one."

    active_branch = get_active_branch()
    if (active_branch != 'master'):
        raise ValueError, "You should start releases only from within the master branch."

    # Bump version and create release branch
    old_version = get_full_version(DEFAULT_VERSION_HEADER_FILENAME)
    new_version = bump_version(old_version, bump_type)
    rel_branch_name = '%s%s' % (BRANCH_VERSION_PREFIX, get_version_string(new_version))
    print('Creating release branch %s ...' % rel_branch_name)
    out, dummy = execute_command('git checkout -b %s' % rel_branch_name)

    # Update version in C header
    print('Bumping version number in %s ...' % DEFAULT_VERSION_HEADER_FILENAME)
    write_version_to_file(new_version, DEFAULT_VERSION_HEADER_FILENAME)
    out, dummy = execute_command('git add %s' % DEFAULT_VERSION_HEADER_FILENAME)
    # Hack: use directly os.system as execute_command is splittingt too much inside quotes
    os.system('git commit -m "Bumped version to %s"' % get_version_string(new_version))

def release_finish():
    """Close a release branch, merge it into master and apply tag."""

    # Check that we are in master branch and there is only one release- branch matching the version in header file.
    if not is_repository_clean():
        raise ValueError, "Repository dirty, commit your changes before starting a release branch."
    active_branch = get_active_branch()
    if (active_branch != 'master'):
        raise ValueError, "You should close releases only from within the master after merging the release branch."

    branches = get_branches()
    rel_branches = [b for b in branches if b.startswith(BRANCH_VERSION_PREFIX)]
    if (len(rel_branches) != 1):
        raise ValueError, "There should be one and only one release- branch open, aborting."

    rel_branch = rel_branches[0]
    version = get_full_version(DEFAULT_VERSION_HEADER_FILENAME)
    version_str =  get_version_string(version)
    branch_version = rel_branch[len(BRANCH_VERSION_PREFIX):]
    if ( version_str != branch_version ):
        raise ValueError, "Version mismatch, open release branch is %s and version in header is %s, aborting." % (
                branch_version, version)

    # Delete release branch
    out, err = execute_command('git branch -d %s' % rel_branch)
    if (err.startswith('error')):
        raise ValueError, "Error in deleting release branch, merge it properly to master and retry."

    # Get previous release tag
    tag_str, err = execute_command('git tag')
    tags = tag_str.split('\n')
    release_tags = []
    for t in tags:
        try:
            rel_fields = t.split('.')
            old_version = [ int(rf) for rf in rel_fields ]
            release_tags.append(t)
        except:
            pass
    if release_tags:
        previous_version_str = release_tags[-1]
    else:
        previous_version_str = ''

    # Apply tag for new version
    out, err = execute_command('git tag %s' % version_str)

    # Get history from last release tag to this one.
    # Don't use execute_command as it breaks arguments that contain spaces
    log_cmd_list = ["git", "log",
                    "--pretty=format:'%h %ad | %s%d <%an>",
                    "--graph",
                    "--date=short",
                    "%s..%s" % (previous_version_str, version_str)
                   ]
    log_process = subprocess.Popen(log_cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    log_out, dummy = log_process.communicate()
    
    # Open temporary file for short history with commits in release range
    with tempfile.NamedTemporaryFile() as tmp_hist_file:
        tmp_hist_file.write('## Changes in %s\n\n\n' % version_str)
        tmp_hist_file.write(HISTORY_TAG_LINE)
        tmp_hist_file.writelines(HISTORY_EDIT_TEMPLATE)
        tmp_hist_file.write(log_out)
        tmp_hist_file.flush()
        # subprocess hangs the shell and doesn't open editor here as it's capturing stdout,
        # using os.system instead
        os.system('%s %s' % (os.getenv('EDITOR'), tmp_hist_file.name))
        tmp_hist_file.seek(0)
        edited_history = tmp_hist_file.read()

    keep_history = re.compile(r"""(.*?) ^%s$ .*""" % HISTORY_TAG_LINE.replace('#', '\#').replace('%', '\%'),
                              re.VERBOSE | re.DOTALL | re.MULTILINE)
    short_history = keep_history.findall(edited_history)

    if (len(short_history) != 1):
        raise ValueError, "Wrong format in temporary history log, abort. Update manually HISTORY file."

    # Update HISTORY file
    with open(DEFAULT_HISTORY_FILENAME, 'a') as outfile:
        outfile.write(short_history[0])
    out, dummy = execute_command('git add %s' % DEFAULT_HISTORY_FILENAME)
    os.system('git commit -m "Updated %s with changelog in release %s"' % (DEFAULT_HISTORY_FILENAME,
                                                                           version_str) )
    # Move tag to this last commit
    out, err = execute_command('git tag -f %s' % version_str)

if __name__ == '__main__':
    # CL arguments parse
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=['start', 'finish'],
                        help="Command to be performed")
    parser.add_argument("-b", "--bump", default="rev", choices=VERSION_FIELDS,
                        help="Type of version bump (default=rev)")
    args = parser.parse_args()

    if (args.command == 'start'):
        release_start(args.bump)
    elif (args.command == 'finish'):
        release_finish()

